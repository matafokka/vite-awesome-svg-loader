:root {
  --icons-vertical-spacing-raw: calc(var(--image-size) * 0.4);
  --icons-vertical-spacing: var(--icons-vertical-spacing-raw);
  --icons-vertical-spacing: clamp(20px, var(--icons-vertical-spacing-raw), 80px);

  --font-size-initial: 16px;
  --font-size: var(--font-size-initial);

  --text-color: black;
  --bg-color: white;
  --bg-accent-color: lightgrey;
  --grey-border-color: #ccc;

  --color-transition: 0.2s linear;

  @media (prefers-color-scheme: dark) {
    --bg-color: rgb(33, 33, 33);
    --text-color: rgb(226, 226, 226);
    --bg-accent-color: rgb(81, 81, 81);
    --grey-border-color: #818181;
  }
}

* {
  font-size: var(--font-size);
  box-sizing: border-box;
  outline: none;
  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);
}

html {
  overflow-y: scroll;
}

body {
  padding: 0;
  margin: 0;
  font-family: sans-serif;
  background-color: var(--bg-color);
}

h1,
h2,
h3,
h4,
p,
ul,
ol,
label,
input,
button {
  margin-top: 0;
  color: var(--text-color);
}

h1 {
  --font-size: 32px;
  margin-bottom: 28px;
}

h2 {
  --font-size: 22px;
  margin-bottom: 24px;
}

h3 {
  --font-size: 18px;
  margin-bottom: 20px;
}

h4 {
  --font-size: 16px;
  margin-bottom: 18px;
}

// Headers counters

:root {
  counter-reset: heading-2;
}

@for $i from 2 through 5 {
  h#{$i} {
    counter-reset: heading-#{$i + 1};

    &::before {
      $content: "";

      @for $j from 2 through $i {
        $content: $content + "counter(heading-" + $j + ") '.' ";
      }

      content: #{$content + "' '"};
      counter-increment: heading-#{$i};
    }
  }
}

p,
ol,
ul,
li,
.buttons-container {
  margin: 0;
  margin-bottom: 20px;

  &:last-child {
    margin-bottom: 0;
  }
}

h1,
h2,
h3,
h4,
p,
ul,
ol {
  overflow: visible;
  word-wrap: break-word;
}

.text-color {
  color: var(--text-color);
}

.standalone-image {
  width: fit-content;
  max-height: 200px;
  background-origin: 0 0;
}

div.standalone-image {
  width: 100%;
  display: flex;

  svg {
    width: fit-content;
  }
}

input {
  background-color: var(--bg-accent-color);
  border: 1px solid var(--text-color);
  border-radius: 4px;
  padding: 4px;
  margin: 0;
  text-align: center;
}

a,
a:visited {
  --link-color-normal: royalblue;
  --link-color-hover: rgb(24, 51, 134);
  --link-color-active: rgb(75, 103, 187);
  --link-color: var(--link-color-normal);

  text-decoration: none;
  color: var(--link-color);
  border-bottom: 1px solid transparent;
  transition:
    color var(--color-transition),
    border-color var(--color-transition);

  &:hover {
    --link-color: var(--link-color-hover);
    color: var(--link-color-hover);
  }

  &:active {
    --link-color: var(--link-color-active);
  }

  &:focus-visible {
    border-color: var(--link-color);
  }

  @media (prefers-color-scheme: dark) {
    --link-color: cornflowerblue;
    --link-color-hover: rgb(149, 186, 255);
    --link-color-active: rgb(245, 248, 255);
  }
}

button {
  padding: 10px 20px;
  color: white;
  background-color: royalblue;
  border: none;
  outline: 2px dashed transparent;
  outline-offset: -5px;
  border-radius: 8px;
  white-space: nowrap;
  transition:
    background-color var(--color-transition),
    outline-color var(--color-transition);
  cursor: pointer;
  user-select: none;

  &:hover {
    background-color: rgb(38, 80, 207);
  }

  &:active {
    background-color: rgb(20, 60, 150);
  }

  &:focus-visible {
    outline-color: rgb(245, 248, 255);
  }

  &:disabled {
    background-color: rgba(65, 105, 255, 0.5);
    cursor: not-allowed;
  }
}

.mono {
  font-family: monospace;
}

.hidden {
  display: block !important;
  width: 0 !important;
  height: 0 !important;
  opacity: 0 !important;
  margin: 0 !important;
  padding: 0 !important;
  border: none !important;
  outline: none !important;
  overflow: hidden !important;
}

.buttons-container {
  display: flex;
  flex-wrap: wrap;
  gap: 10px;
  align-items: center;
  justify-content: stretch;
  max-width: 370px;

  & > * {
    width: fit-content;
    flex: 1 1;
  }

  @media screen and (max-width: 580px) {
    max-width: unset;
  }
}

.images {
  display: flex;
  flex-wrap: wrap;
  gap: 10px;
  overflow-x: auto;
  overflow-y: hidden; // Not sure where it comes from
  margin-top: var(--icons-vertical-spacing);

  & + * {
    margin-top: var(--icons-vertical-spacing);
  }
}

.cfg-replace-color {
  color: red;
}

// Set fixed images size

.image {
  min-width: var(--image-size);
  min-height: var(--image-size);
  width: var(--image-size);
  height: var(--image-size);
  max-width: var(--image-size);
  max-height: var(--image-size);
}

.skip-elements-image {
  height: fit-content;
  max-height: var(--image-size);
  max-height: max(200px, var(--image-size)); // Not supported in older browsers
  color: red;
}

// Make SVGs in DOM fit container
.svg-in-dom svg {
  width: 100%;
  height: 100%;
}

// Color animation

@keyframes color1 {
  0% {
    color: red;
  }

  25% {
    color: yellow;
  }

  50% {
    color: greenyellow;
  }

  75% {
    color: blue;
  }

  100% {
    color: purple;
  }
}

@keyframes color2 {
  0% {
    color: red;
  }

  100% {
    color: blue;
  }
}

// You can apply animation to the whole container
.color-animation {
  animation: color1 1s linear infinite;
}

// Or, if you want to be really precise, select actual <use> element to animate.

.color-animation :nth-child(2n) {
  animation: color2 1s linear infinite;
}

.checkbox {
  display: flex;
  align-items: center;
  gap: 14px;
  width: fit-content;
  user-select: none;
  cursor: pointer;

  $input: 'input[type="checkbox"]';

  #{$input} {
    $size: 18px;
    $padding: 4px;

    width: 0;
    height: 0;
    display: flex;
    align-items: center;
    margin-right: $size;

    &::after {
      content: "âœ”";
      display: flex;
      align-items: center;
      justify-content: center;
      min-width: $size;
      width: $size;
      height: $size;
      font-size: $size - $padding;
      line-height: $size;
      border-radius: 6px;
      border: 2px solid var(--grey-border-color);
      background-color: var(--bg-accent-color);
      color: transparent;
      transition:
        color var(--color-transition),
        background-color var(--color-transition),
        border-color var(--color-transition),
        outline-color var(--color-transition);
      cursor: pointer;
    }

    &:checked::after {
      background-color: royalblue;
      border-color: transparent;
      color: white;
    }

    &:focus-visible::after {
      outline: 2px solid royalblue;
      outline-offset: 4px;
    }
  }

  &:hover #{$input}::after {
    background-color: cornflowerblue;
  }

  &:active #{$input}::after {
    background-color: rgb(20, 60, 150);
  }
}

.main {
  max-width: 1024px;
  margin-left: auto;
  margin-right: auto;
  padding: 20px;
  padding-bottom: 40px;
}

#content-wrapper {
  display: flex;
  flex-flow: column;
  min-height: 100vh;
}

$expand-adjustment-at: 480px;

#adjustment-container {
  position: sticky;
  display: flex;
  align-items: center;
  justify-content: center;
  bottom: 0;
  left: 0;
  width: 100%;
  margin-top: auto;
  padding-left: 20px;
  padding-right: 20px;
  padding-bottom: 20px;
  pointer-events: none;

  @media screen and (max-width: $expand-adjustment-at) {
    padding: 0;
  }
}

.adjustment-content {
  --shadow-color: rgba(0, 0, 0, 0.2);

  display: flex;
  align-items: center;
  justify-content: center;
  flex-wrap: wrap;
  gap: 10px;
  width: fit-content;
  padding: 10px;
  background-color: rgba(255, 255, 255, 0.8);
  border: 1px solid var(--grey-border-color);
  border-radius: 8px;
  backdrop-filter: blur(10px);
  box-shadow: 0 10px 20px var(--shadow-color);
  pointer-events: all;

  @media (prefers-color-scheme: dark) {
    --shadow-color: rgba(0, 0, 0, 0.7);

    background-color: rgba(81, 81, 81, 0.5);
  }

  @media screen and (max-width: $expand-adjustment-at) {
    width: 100%;
    border-radius: 0;
    border: 0;
    border-top: 1px solid var(--grey-border-color);
    box-shadow: 0 0 15px var(--shadow-color);
  }

  input[type="range"] {
    width: 100px;
  }

  input[type="number"] {
    width: 84px;
    background-color: transparent;
    border: 1px solid var(--grey-border-color);

    &::-webkit-inner-spin-button,
    &::-webkit-outer-spin-button {
      opacity: 1;
    }
  }
}
